#include <stdio.h>

int max(int a, int b) { return (a > b) ? a : b; }

int knapSack(int W, int wt[], int val[], int n)
{
    if (n == 0 || W == 0)
        return 0;

    if (wt[n - 1] > W)
        return knapSack(W, wt, val, n - 1);

    else
        return max(
            val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1),
            knapSack(W, wt, val, n - 1));
}

int main()
{
    int profit[] = { 60, 100, 120,150 };
    int weight[] = { 10, 20, 30, 35  };
    int W = 50;
    int n = sizeof(profit) / sizeof(profit[0]);
    printf("%d", knapSack(W, weight, profit, n));
    return 0;
}


8.  

#include <stdio.h>

int isSubsetSumRec(int arr[], int n, int sum) {
    if (sum == 0) {
        return 1;
    }
    if (n == 0) {
        return 0;
    }
    if (arr[n - 1] > sum) {
        return isSubsetSumRec(arr, n - 1, sum);
    }
    return isSubsetSumRec(arr, n - 1, sum) || isSubsetSumRec(arr, n - 1, sum - arr[n - 1]);
}

int isSubsetSum(int arr[], int n, int sum) {
    return isSubsetSumRec(arr, n, sum);
}

int main() {
    int arr[] = {3, 34, 4, 12, 5, 2};
    int sum = 9;
    int n = sizeof(arr) / sizeof(arr[0]);

    if (isSubsetSum(arr, n, sum)) {
        printf("True\n");
    } else {
        printf("False\n");
    }

    return 0;
}
