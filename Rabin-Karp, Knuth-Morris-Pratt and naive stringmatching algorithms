Naive String-Matching Algorithm
1. The naive string-matching algorithm checks for a match at every possible starting position in the text. It compares the substring of the text with the pattern character by character.
Algorithm:
Start from the first character of the text.
Compare the pattern with the substring starting at that position.
If all characters match, return the starting index of the match.
If not, move to the next position and repeat the comparison.
Time Complexity:
Best Case: O(n), when the pattern matches immediately or no characters match.
Worst Case: O(n×m), where n is the length of the text and m is the length of the pattern. This happens when there are many false matches.

2. Rabin-Karp Algorithm
The Rabin-Karp algorithm uses a hash function to calculate a hash value for the pattern and for each substring of the text. If the hash values match, it checks the substring character by character for a match.
Algorithm:
Compute the hash of the pattern and the hash of the initial window of the text.
Slide the window one character at a time, updating the hash and comparing it with the pattern’s hash.
If hashes match, compare the actual substrings to verify the match.
Return all starting indices where the hash matches.
Time Complexity:
Best Case: O(n+m) when all hash values are unique or there are no matches.
Worst Case: O(n×m), when there are many hash collisions.
Average Case: O(n+m), assuming a good hash function and low collision rate.

3. Knuth-Morris-Pratt (KMP) Algorithm
The KMP algorithm preprocesses the pattern to create a partial match table (also called "prefix function") that helps skip unnecessary character comparisons. This table contains the length of the longest prefix that is also a suffix for every position in the pattern.
Algorithm:
Preprocess the pattern to create the partial match table.
Use the table to skip characters in the text when mismatches occur, thereby avoiding redundant comparisons.
Time Complexity:
Best Case: O(n), when the pattern and text are mostly matching.
Worst Case: O(n+m), where n is the length of the text and m is the length of the pattern.
Average Case: O(n+m), due to preprocessing the pattern and skipping unnecessary comparisons.
